{"version":3,"sources":["../node_modules/moment-mini/locale sync /^/.//.*$","serviceWorker.js","fontawesome.js","actionTypes.js","reducers/snoowrap.js","reducers/posts.js","reducers/index.js","store.js","credentials.js","api/authentication.js","actions/snoowrap.js","components/Loading/index.js","components/Header/index.js","actions/posts.js","utils.js","components/PostContent/index.js","components/Post/index.js","containers/PostFeedContainer.js","pages/Landing.js","pages/NotFoundPage.js","App.js","Root.js","index.js"],"names":["map","./locale","./locale.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","library","add","fas","fab","far","GET_SNOOWRAP","RECEIVE_SNOOWRAP","REQUEST_POSTS","REQUEST_MORE_POSTS","RECEIVE_POSTS","initialState","loading","snoowrap","items","combineReducers","state","arguments","length","undefined","action","type","objectSpread","posts","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","browserUA","navigator","userAgent","toLocaleLowerCase","credentials","concat","pkg","name","version","clientId","protocol","host","appOnlyOauth","_callee","formData","result","regenerator_default","a","wrap","_context","prev","next","FormData","append","axios","post","headers","Authorization","btoa","then","res","data","catch","err","console","log","sent","abrupt","stop","this","authenticate","_authenticate","apply","_callee2","appOnly","_snoowrap","_context2","Snoowrap","accessToken","access_token","Loading","_ref","spinner","react_default","createElement","react_fontawesome_index_es","icon","className","Header","Link","to","requestPosts","subreddit","requestMorePosts","receivePosts","isImgUrl","url","abbrNumber","number","decimalPlaces","exponent","toString","decimals","Math","pow","tmp","round","PostContent","is_self","selftext","dangerouslySetInnerHTML","__html","selftext_html","is_video","post_hint","src","media","reddit_video","fallback_url","loop","autoPlay","muted","oembed","html","alt","title","domain","Post","color","randomColor","seed","display_name","user","author","score","style","subreddit_name_prefixed","components_PostContent","moment","unix","created_utc","fromNow","num_comments","PostFeedContainer","componentDidMount","_this","loadPosts","addEventListener","onScroll","innerHeight","scrollY","document","body","offsetHeight","props","fetchPosts","error","loadMorePosts","fetchMorePosts","removeEventListener","_this$props","components_Loading","Post_Post","key","Component","defaultProps","connect","dispatch","asyncToGenerator","mark","getState","getHot","_x","_x2","_ref2","newPosts","fetchMore","amount","_x3","_x4","Landing","containers_PostFeedContainer","NotFoundPage","marginTop","padding","App","components_Header","Switch","Route","exact","path","component","Root","createSnoowrapper","src_App","withRouter","snoowrap_","ReactDOM","render","es","BrowserRouter","src_Root","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e8f01488.chunk.js","sourcesContent":["var map = {\n\t\"./locale\": 195,\n\t\"./locale.js\": 195\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 421;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport {fas} from '@fortawesome/free-solid-svg-icons';\nimport {fab} from '@fortawesome/free-brands-svg-icons';\nimport {far} from '@fortawesome/free-regular-svg-icons';\n\nlibrary.add(fas,fab,far);","export const GET_SNOOWRAP = \"GET_SNOOWRAP\";\nexport const RECEIVE_SNOOWRAP = \"RECEIVE_SNOOWRAP\";\n\n\nexport const REQUEST_POSTS = \"REQUEST_POSTS\";\nexport const REQUEST_MORE_POSTS = \"REQUEST_MORE_POSTS\";\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\n\n\n","import {GET_SNOOWRAP, RECEIVE_SNOOWRAP} from '../actionTypes';\n\nconst initialState = {\n  loading: true,  \n  snoowrap: null\n}\n\n\nexport default function snoowrap(state = initialState, action) {\n  switch(action.type) {\n    case GET_SNOOWRAP:\n      return {\n        ...state,\n        loading: true\n      }\n\n    case RECEIVE_SNOOWRAP:\n      return { \n        ...state, \n        loading: false, \n        snoowrap: action.snoowrap \n      };\n    \n    default:\n      return state\n  }\n}","import {REQUEST_POSTS, REQUEST_MORE_POSTS, RECEIVE_POSTS} from '../actionTypes';\n\nconst initialState = {\n  loading: true,  \n  items: [],\n}\n\nexport default function posts(state = initialState, action) {\n  switch(action.type) {\n    case REQUEST_POSTS:\n      return {\n        ...state,\n        loading: true\n      }\n\n    case REQUEST_MORE_POSTS:\n      return {\n        ...state,\n        loading: true\n      }\n\n    case RECEIVE_POSTS:\n      return { \n        ...state, \n        loading: false, \n        items: action.posts \n      };\n    \n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux';\nimport snoowrap from './snoowrap';\nimport posts from './posts';\n\nexport default combineReducers({\n  snoowrap,\n  posts\n})","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducers\";\n\n// const middleware = [thunk];\n\n// const store = createStore(\n//   reducer,\n//   compose(\n//     applyMiddleware(...middleware),\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n//   )\n// );\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n","import pkg from '.././package.json'\nconst browserUA = navigator.userAgent.toLocaleLowerCase();\n\nexport default {\n  userAgent: `${browserUA}:${pkg.name}:v${pkg.version} (by ihsan)`,\n  clientId: \"KNLSx222D6ygiA\"\n}","import Snoowrap from 'snoowrap';\nimport axios from 'axios';\n\nimport credentials from '../credentials';\n\nconst {protocol, host} = window.location;\n\nconst REDIRECT_URI = `${protocol}//${host}/authorize_callback`;\n\n// https://github.com/reddit-archive/reddit/wiki/OAuth2#application-only-oauth\nasync function appOnlyOauth() {\n  const formData = new FormData();\n  formData.append(\n    \"grant_type\",\n    \"https://oauth.reddit.com/grants/installed_client\"\n  );\n  formData.append(\"device_id\", \"DO_NOT_TRACK_THIS_DEVICE\");\n\n  let result = await \n    axios\n      .post(\"https://www.reddit.com/api/v1/access_token\", formData, {\n        headers: {\n          Authorization: `Basic ${window.btoa(`${credentials.clientId}:`)}`,\n        }\n      })\n      .then(res => {\n        // console.log(res.data);\n        return res.data;\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n  return result;\n}\n\nexport default async function authenticate() {\n  const appOnly = await appOnlyOauth();\n  // console.log(appOnly);\n\n  const _snoowrap = new Snoowrap({\n    userAgent: credentials.userAgent,\n    accessToken: appOnly.access_token\n  })\n\n  return _snoowrap;\n}\n\nexport function getAuthUrl(state = '') {\n  const options = {\n    clientId: credentials.clientId,\n    scope: [\n      \"identity\",\n      \"mysubreddits\",\n      \"subscribe\",\n      \"vote\",\n      \"submit\",\n      \"save\",\n      \"edit\",\n      \"history\",\n      \"read\",\n      \"privatemessages\",\n      \"account\",\n    ],\n    redirectUri: REDIRECT_URI,\n    permanent: true,\n    state: state // a random string, this could be validated when the user is redirected back\n  }\n\n  const authUrl = Snoowrap.getAuthUrl(options);\n  return authUrl;\n}\n","import authenticate from '../api/authentication';\nimport {GET_SNOOWRAP, RECEIVE_SNOOWRAP} from '../actionTypes'\n\n/** Action creator */\nconst requestSnoowrap = () => {\n  return {\n    type: GET_SNOOWRAP\n  };\n}\n\nconst receiveSnoowrap = (snoowrap) => {\n  return {\n    type: RECEIVE_SNOOWRAP,\n    snoowrap\n  };\n}\n\nexport const initSnoowrap = () => {\n  return async dispatch => {\n    dispatch(requestSnoowrap());\n    const snoowrap_ = await authenticate();\n    dispatch(receiveSnoowrap(snoowrap_));\n  }\n}\n\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Loading.scss';\n\nfunction Loading({type}) {\n  const spinner = <FontAwesomeIcon icon=\"spinner\"/>\n\n  switch(type){\n    case \"fullscreen\":\n      return <div className=\"fullscreen\">{spinner}</div>\n    default:\n      return null;\n  }\n}\n\nLoading.propTypes = {\n  type: PropTypes.oneOf([\"regular\", \"fullscreen\", \"inline\"]).isRequired,\n};\n\nexport default Loading;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nimport './Header.scss';\n\nfunction Header() {\n  return (\n    <header>\n      <div className=\"header-content\">\n        <Link to=\"/\" className=\"brand\">\n          <div className=\"icon\">\n            <FontAwesomeIcon icon={[\"fas\",\"bolt\"]}/>\n          </div>\n        </Link>\n        <small className=\"title\">Neptune</small>\n      </div>\n    </header>\n  )\n}\n\nexport default Header;\n","// import moment from 'moment-mini';\nimport {REQUEST_POSTS, REQUEST_MORE_POSTS, RECEIVE_POSTS} from '../actionTypes';\n\n/** Action creator */\nconst requestPosts = (subreddit) => {\n  return {\n    type: REQUEST_POSTS,\n    subreddit\n  }\n}\n\nconst requestMorePosts = (subreddit) => {\n  return {\n    type: REQUEST_MORE_POSTS,\n    subreddit\n  }\n}\n\nconst receivePosts = (subreddit, posts) => {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit,\n    posts\n  }\n}\n\nexport const fetchPosts = (subreddit)  => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    const {snoowrap} = state.snoowrap;\n\n    dispatch(requestPosts(subreddit));\n    const posts = await snoowrap.getHot(subreddit);\n    dispatch(receivePosts(subreddit, posts));\n  }\n}\n\nexport const fetchMorePosts = (subreddit)  => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    const {items} = state.posts;\n\n    dispatch(requestMorePosts(subreddit));\n    const newPosts = await items.fetchMore({amount: 25});\n    dispatch(receivePosts(subreddit, newPosts));\n  }\n}\n","/**\n * Check url if it links to an image  \n * @param {String} url \n */\nexport const isImgUrl = (url) => {\n  return url.match(/[^/]+(jpeg|jpg|png|gif)$/) !== null;\n}\n\n/**\n * Shorten number over thousand\n * \n * https://stackoverflow.com/questions/9345136/1000000-to-1m-and-1000-to-1k-and-so-on-in-js/9345181\n * @param {Number} number \n * @param {Number} decimalPlaces \n */\nexport const abbrNumber = (number, decimalPlaces = 1) => {\n  if(number < 1000) return number;\n\n  let exponent = number.toString().length;\n  const decimals = Math.pow(10, decimalPlaces);\n  exponent -= exponent % 3;\n  const tmp = Math.pow(10, exponent);\n  const shortenNumber = Math.round(number * decimals / tmp) / decimals + \" kMGTPE\"[exponent / 3];\n  return shortenNumber;\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { isImgUrl } from \"../../utils\";\nimport './PostContent.scss';\n\nfunction PostContent({ post }) {\n  if (post.is_self) {\n    return (\n      <div className=\"post-self-text\">\n        <p>{post.selftext}</p>\n        <div dangerouslySetInnerHTML={{ __html: post.selftext_html }} />\n        <div className=\"overflow-overlay\" />\n      </div>\n    );\n  }\n\n  // embedded video\n  if (post.is_video && post.post_hint === \"hosted:video\") {\n    return (\n      <video className=\"post-preview-video\" \n        src={post.media.reddit_video.fallback_url} \n        loop = {false} \n        autoPlay = {true}\n        muted = {true}\n      />\n    );\n  }\n\n  // rich video like YouTube\n  if (post.post_hint === \"rich:video\") {\n    return (\n      <div dangerouslySetInnerHTML={{ __html: post.media.oembed.html }} />\n    );\n  }\n  \n  // image preview\n  if (isImgUrl(post.url)) {\n    return <img className=\"post-preview-img\" src={post.url} alt={post.title} />;\n  }\n\n  // handle non-direct imgur links\n  if (post.domain === \"imgur.com\") {\n    return (\n      <img\n        className=\"post-preview-img\"\n        src={`${post.url}.jpg`}\n        alt={post.title}\n      />\n    );\n  }\n  return null;\n}\n\nPostContent.propTypes = {\n  post: PropTypes.object.isRequired,\n};\n\nexport default PostContent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from \"moment-mini\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport randomColor from \"randomcolor\";\n\nimport {abbrNumber} from '../../utils';\nimport PostContent from '../PostContent/';\nimport './Post.scss';\n\nexport default function Post({ post }) {\n  const color = randomColor({\n    seed: post.subreddit.display_name\n  });\n  \n  const user = <div className=\"user\">u/{post.author.name}</div>\n\n  return (\n    <div className=\"post-component\">\n      <div className=\"post-score\">\n        <button className=\"vote-button vote-up\">\n          <FontAwesomeIcon icon=\"arrow-up\"/>\n        </button>\n        <div className=\"score\">{abbrNumber(post.score)}</div>\n        <button className=\"vote-button vote-down\">\n          <FontAwesomeIcon icon=\"arrow-down\"/>\n        </button>\n      </div>\n\n      <div className=\"post-data\">\n        <div className=\"post-sub\" style={{ color: color}}>\n          <small>{post.subreddit_name_prefixed}</small>\n        </div>\n          <div className=\"post-title\">{post.title}</div>\n        <div className=\"content-wrapper\">\n          <PostContent post={post} />\n        </div>\n        <div className=\"bottom-layout\">\n          <div className=\"post-info\">\n            <small>Posted by {user} - {moment.unix(post.created_utc).fromNow()}</small>\n          </div>\n          <div className=\"post-comment\">\n            <small>{abbrNumber(post.num_comments)} Comments</small>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.object.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport {fetchPosts, fetchMorePosts} from \"../actions/posts\";\n\nimport Loading from '../components/Loading'\nimport Post from '../components/Post'\n\nclass PostFeedContainer extends Component {\n  componentDidMount = () => {\n    this.loadPosts();\n    window.addEventListener('scroll', this.onScroll, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.onScroll, false);\n  }\n\n  onScroll = () => {\n    if (\n      (window.innerHeight + window.scrollY) >= (document.body.offsetHeight - 500) &&\n      this.props.posts.length\n    ) {\n      // this.loadMorePosts();\n    }\n  }\n\n  loadPosts = () => {\n    const { subreddit } = this.props;\n    try {\n      this.props.fetchPosts(subreddit);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  loadMorePosts = () => {\n    const { subreddit } = this.props;\n    \n    try {\n      this.props.fetchMorePosts(subreddit);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  \n  render() {\n    const { loading, posts } = this.props;\n\n    if(loading){\n      return <Loading type=\"fullscreen\"/>\n    }\n\n    if(posts.length === 0) {\n      return <div>No post found. :C</div>\n    }\n\n\n    return (\n      <div className=\"post-feed\">\n        {posts.map(post => <Post key={post.id} post={post} />)}\n      </div>\n    )\n  }\n}\n\nPostFeedContainer.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  fetchPosts: PropTypes.func.isRequired,\n  fetchMorePosts: PropTypes.func.isRequired,\n  subreddit: PropTypes.string,\n  posts: PropTypes.array.isRequired,\n};\n\nPostFeedContainer.defaultProps = {\n  subreddit: \"\"\n}\n\nconst mapStateToProps = ({posts}) => {\n  return {\n    loading: posts.loading,\n    posts: posts.items\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchPosts: (subreddit) => {\n      dispatch(fetchPosts(subreddit));\n    },\n    fetchMorePosts: (subreddit) => {\n      dispatch(fetchMorePosts(subreddit));\n    }\n  }\n};\n\nexport default connect (\n  mapStateToProps,\n  mapDispatchToProps\n)(PostFeedContainer);\n","import React from 'react';\nimport PostFeedContainer from '../containers/PostFeedContainer'\n\nexport default function Landing() {\n  return (\n    <div className=\"main-content\">\n      <PostFeedContainer subreddit=\"\" />\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function NotFoundPage() {\n  return (\n    <div style={{ marginTop: '70px',padding:'0 45px'}}>\n      <h1>404 Page Not Found</h1>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Header from './components/Header';\nimport Landing from './pages/Landing'\nimport NotFoundPage from './pages/NotFoundPage'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Switch>\n        <Route exact path = \"/\" component = { Landing } />\n        <Route component = { NotFoundPage } />\n      </Switch>\n    </div>\n  )\n}\n\n\nexport default App;\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport { initSnoowrap } from \"./actions/snoowrap\";\nimport Loading from './components/Loading'\nimport App from './App';\n\nclass Root extends Component {\n  componentDidMount = () => {\n    this.props.createSnoowrapper();\n  }\n  \n  render() {\n    const {loading} = this.props;\n\n    if(loading){\n      return <Loading type='fullscreen'/>\n    }\n\n    return <App />;\n  }\n}\n\nRoot.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  createSnoowrapper: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = ({snoowrap}) => {\n  return {\n    loading: snoowrap.loading,\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createSnoowrapper: () => {\n      dispatch(initSnoowrap());\n    }\n  }\n};\n\nexport default withRouter(\n  connect (\n    mapStateToProps,\n    mapDispatchToProps\n  )(Root)\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport './fontawesome';\nimport './index.scss';\nimport store from './store';\nimport Root from './Root';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <Root />\n    </Router>\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}